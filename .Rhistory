toptax = names(sort(taxa_sums(ps3_Bacteria), decreasing=TRUE))[1:100];toptax
ps.toptax_Bacteria = transform_sample_counts(ps3_Bacteria, function(x) {x/sum(x)*100});ps.toptax_Bacteria
ps.toptax_Bacteria <- prune_taxa(toptax, ps.toptax_Bacteria);ps.toptax_Bacteria
upset_bacteria_Order=upset_pq(ps.toptax_Bacteria, "Genotype", taxa = "Order");upset_bacteria_Order
ggsave(
"/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/Shared_upset_bacteria_Order.tiff",
plot = upset_bacteria_Order,
scale = 1,
width = 16,
height = 11,
units = c("cm"),
dpi = 600)
load("/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/ps3_Bacteria.RData")
library("MiscMetabar")
library("phyloseq")
library("networkD3")
#summary_plot_pq(ps3_Bacteria)
#sankey_pq(gp, taxa = c(1:5))
#upset_pq(ps3_Bacteria, "Genotype", taxa = "Genus")
toptax = names(sort(taxa_sums(ps3_Bacteria), decreasing=TRUE))[1:100];toptax
ps.toptax_Bacteria = transform_sample_counts(ps3_Bacteria, function(x) {x/sum(x)*100});ps.toptax_Bacteria
ps.toptax_Bacteria <- prune_taxa(toptax, ps.toptax_Bacteria);ps.toptax_Bacteria
upset_bacteria_Order=upset_pq(ps.toptax_Bacteria, "Genotype", taxa = "Order");upset_bacteria_Order
ggsave(
"/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/Shared_upset_bacteria_Order.tiff",
plot = upset_bacteria_Order,
scale = 1,
width = 17,
height = 11,
units = c("cm"),
dpi = 600)
load("/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/ps3_Bacteria.RData")
library("MiscMetabar")
library("phyloseq")
library("networkD3")
#summary_plot_pq(ps3_Bacteria)
#sankey_pq(gp, taxa = c(1:5))
#upset_pq(ps3_Bacteria, "Genotype", taxa = "Genus")
toptax = names(sort(taxa_sums(ps3_Bacteria), decreasing=TRUE))[1:25];toptax
ps.toptax_Bacteria = transform_sample_counts(ps3_Bacteria, function(x) {x/sum(x)*100});ps.toptax_Bacteria
ps.toptax_Bacteria <- prune_taxa(toptax, ps.toptax_Bacteria);ps.toptax_Bacteria
upset_bacteria_Genus=upset_pq(ps.toptax_Bacteria, "Genotype", taxa = "Genus");upset_bacteria_Genus
ggsave(
"/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/Shared_upset_bacteria_Genus.tiff",
plot = upset_bacteria_Genus,
scale = 1,
width = 18,
height = 11,
units = c("cm"),
dpi = 600)
load("/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/ps3_Fungi.RData")
library("MiscMetabar")
library("phyloseq")
library("networkD3")
#summary_plot_pq(ps3_Fungi)
#sankey_pq(gp, taxa = c(1:5))
#upset_pq(ps3_Fungi, "Genotype", taxa = "Genus")
toptax = names(sort(taxa_sums(ps3_Fungi), decreasing=TRUE))[1:100];toptax
ps.toptax_Fungi = transform_sample_counts(ps3_Fungi, function(x) {x/sum(x)*100});ps.toptax_Fungi
ps.toptax_Fungi <- prune_taxa(toptax, ps.toptax_Fungi);ps.toptax_Fungi
upset_Fungi_Order=upset_pq(ps.toptax_Fungi, "Genotype", taxa = "Order");upset_Fungi_Order
ggsave(
"/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/Shared_upset_Fungi_Order.tiff",
plot = upset_Fungi_Order,
scale = 1,
width = 17,
height = 11,
units = c("cm"),
dpi = 600)
load("/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/ps3_Fungi.RData")
library("MiscMetabar")
library("phyloseq")
library("networkD3")
#summary_plot_pq(ps3_Fungi)
#sankey_pq(gp, taxa = c(1:5))
#upset_pq(ps3_Fungi, "Genotype", taxa = "Genus")
toptax = names(sort(taxa_sums(ps3_Fungi), decreasing=TRUE))[1:100];toptax
ps.toptax_Fungi = transform_sample_counts(ps3_Fungi, function(x) {x/sum(x)*100});ps.toptax_Fungi
ps.toptax_Fungi <- prune_taxa(toptax, ps.toptax_Fungi);ps.toptax_Fungi
upset_Fungi_Order=upset_pq(ps.toptax_Fungi, "Genotype", taxa = "Order");upset_Fungi_Order
ggsave(
"/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/Shared_upset_Fungi_Order.tiff",
plot = upset_Fungi_Order,
scale = 1,
width = 18,
height = 11,
units = c("cm"),
dpi = 600)
load("/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/ps3_Fungi.RData")
library("MiscMetabar")
library("phyloseq")
library("networkD3")
#summary_plot_pq(ps3_Fungi)
#sankey_pq(gp, taxa = c(1:5))
#upset_pq(ps3_Fungi, "Genotype", taxa = "Genus")
toptax = names(sort(taxa_sums(ps3_Fungi), decreasing=TRUE))[1:100];toptax
ps.toptax_Fungi = transform_sample_counts(ps3_Fungi, function(x) {x/sum(x)*100});ps.toptax_Fungi
ps.toptax_Fungi <- prune_taxa(toptax, ps.toptax_Fungi);ps.toptax_Fungi
upset_Fungi_Order=upset_pq(ps.toptax_Fungi, "Genotype", taxa = "Order");upset_Fungi_Order
ggsave(
"/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/Shared_upset_Fungi_Order.tiff",
plot = upset_Fungi_Order,
scale = 1,
width = 19,
height = 11,
units = c("cm"),
dpi = 600)
load("/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/ps3_Fungi.RData")
library("MiscMetabar")
library("phyloseq")
library("networkD3")
#summary_plot_pq(ps3_Fungi)
#sankey_pq(gp, taxa = c(1:5))
#upset_pq(ps3_Fungi, "Genotype", taxa = "Genus")
toptax = names(sort(taxa_sums(ps3_Fungi), decreasing=TRUE))[1:100];toptax
ps.toptax_Fungi = transform_sample_counts(ps3_Fungi, function(x) {x/sum(x)*100});ps.toptax_Fungi
ps.toptax_Fungi <- prune_taxa(toptax, ps.toptax_Fungi);ps.toptax_Fungi
upset_Fungi_Order=upset_pq(ps.toptax_Fungi, "Genotype", taxa = "Order");upset_Fungi_Order
ggsave(
"/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/Shared_upset_Fungi_Order.tiff",
plot = upset_Fungi_Order,
scale = 1,
width = 20,
height = 11,
units = c("cm"),
dpi = 600)
load("/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/ps3_Fungi.RData")
library("MiscMetabar")
library("phyloseq")
library("networkD3")
#summary_plot_pq(ps3_Fungi)
#sankey_pq(gp, taxa = c(1:5))
#upset_pq(ps3_Fungi, "Genotype", taxa = "Genus")
toptax = names(sort(taxa_sums(ps3_Fungi), decreasing=TRUE))[1:25];toptax
ps.toptax_Fungi = transform_sample_counts(ps3_Fungi, function(x) {x/sum(x)*100});ps.toptax_Fungi
ps.toptax_Fungi <- prune_taxa(toptax, ps.toptax_Fungi);ps.toptax_Fungi
upset_Fungi_Genus=upset_pq(ps.toptax_Fungi, "Genotype", taxa = "Genus");upset_Fungi_Genus
ggsave(
"/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/Shared_upset_Fungi_Genus.tiff",
plot = upset_Fungi_Genus,
scale = 1,
width = 18,
height = 11,
units = c("cm"),
dpi = 600)
load("/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/ps3_Fungi.RData")
library("MiscMetabar")
library("phyloseq")
library("networkD3")
#summary_plot_pq(ps3_Fungi)
#sankey_pq(gp, taxa = c(1:5))
#upset_pq(ps3_Fungi, "Genotype", taxa = "Genus")
toptax = names(sort(taxa_sums(ps3_Fungi), decreasing=TRUE))[1:25];toptax
ps.toptax_Fungi = transform_sample_counts(ps3_Fungi, function(x) {x/sum(x)*100});ps.toptax_Fungi
ps.toptax_Fungi <- prune_taxa(toptax, ps.toptax_Fungi);ps.toptax_Fungi
upset_Fungi_Genus=upset_pq(ps.toptax_Fungi, "Genotype", taxa = "Genus");upset_Fungi_Genus
ggsave(
"/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/Shared_upset_Fungi_Genus.tiff",
plot = upset_Fungi_Genus,
scale = 1,
width = 20,
height = 11,
units = c("cm"),
dpi = 600)
load("/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/ps3_Fungi.RData")
library("MiscMetabar")
library("phyloseq")
library("networkD3")
#summary_plot_pq(ps3_Fungi)
#sankey_pq(gp, taxa = c(1:5))
#upset_pq(ps3_Fungi, "Genotype", taxa = "Genus")
toptax = names(sort(taxa_sums(ps3_Fungi), decreasing=TRUE))[1:25];toptax
ps.toptax_Fungi = transform_sample_counts(ps3_Fungi, function(x) {x/sum(x)*100});ps.toptax_Fungi
ps.toptax_Fungi <- prune_taxa(toptax, ps.toptax_Fungi);ps.toptax_Fungi
upset_Fungi_Genus=upset_pq(ps.toptax_Fungi, "Genotype", taxa = "Genus");upset_Fungi_Genus
ggsave(
"/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/Shared_upset_Fungi_Genus.tiff",
plot = upset_Fungi_Genus,
scale = 1,
width = 18,
height = 11,
units = c("cm"),
dpi = 600)
load("/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/ps3_Archaea.RData")
library("MiscMetabar")
library("phyloseq")
library("networkD3")
#summary_plot_pq(ps3_Archaea)
#sankey_pq(gp, taxa = c(1:5))
#upset_pq(ps3_Archaea, "Genotype", taxa = "Genus")
toptax = names(sort(taxa_sums(ps3_Archaea), decreasing=TRUE))[1:100];toptax
ps.toptax_Archaea = transform_sample_counts(ps3_Archaea, function(x) {x/sum(x)*100});ps.toptax_Archaea
ps.toptax_Archaea <- prune_taxa(toptax, ps.toptax_Archaea);ps.toptax_Archaea
upset_Archaea_Order=upset_pq(ps.toptax_Archaea, "Genotype", taxa = "Order");upset_Archaea_Order
load("/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/ps3_Archaea.RData")
library("MiscMetabar")
library("phyloseq")
library("networkD3")
#summary_plot_pq(ps3_Archaea)
#sankey_pq(gp, taxa = c(1:5))
#upset_pq(ps3_Archaea, "Genotype", taxa = "Genus")
ps3_Archaea <- prune_taxa(taxa_sums(ps3_Archaea) > 0, ps3_Archaea)
toptax = names(sort(taxa_sums(ps3_Archaea), decreasing=TRUE))[1:100];toptax
ps.toptax_Archaea = transform_sample_counts(ps3_Archaea, function(x) {x/sum(x)*100});ps.toptax_Archaea
ps.toptax_Archaea <- prune_taxa(toptax, ps.toptax_Archaea);ps.toptax_Archaea
upset_Archaea_Order=upset_pq(ps.toptax_Archaea, "Genotype", taxa = "Order");upset_Archaea_Order
load("/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/ps3_Archaea.RData")
library("MiscMetabar")
library("phyloseq")
library("networkD3")
#summary_plot_pq(ps3_Archaea)
#sankey_pq(gp, taxa = c(1:5))
#upset_pq(ps3_Archaea, "Genotype", taxa = "Genus")
ps3_Archaea <- prune_taxa(taxa_sums(ps3_Archaea) > 0, ps3_Archaea)
toptax = names(sort(taxa_sums(ps3_Archaea), decreasing=TRUE))[1:20];toptax
ps.toptax_Archaea = transform_sample_counts(ps3_Archaea, function(x) {x/sum(x)*100});ps.toptax_Archaea
ps.toptax_Archaea <- prune_taxa(toptax, ps.toptax_Archaea);ps.toptax_Archaea
upset_Archaea_Order=upset_pq(ps.toptax_Archaea, "Genotype", taxa = "Order");upset_Archaea_Order
# Define prevalence of each taxa; # (in how many samples did each taxa appear at least once)
library(doParallel);packageVersion("doParallel")#‘1.0.17’
library(foreach);packageVersion("foreach")#‘1.5.2’
library(tidyverse);packageVersion("tidyverse")#‘2.0.0’
library(ggplot2);packageVersion("ggplot2")#‘3.5.0’
library(vegan);packageVersion("vegan")#‘2.6.4’
library(reshape2);packageVersion("reshape2")#‘1.4.4’
library(phyloseq);packageVersion("phyloseq")#‘1.46.0’
library(randomForest);packageVersion("randomForest")
library(doBy);packageVersion("doBy")#‘4.7.1.1’
library(plotrix);packageVersion("plotrix")#‘3.8.4’
library(ggpubr);packageVersion("ggpubr")#‘0.6.0’
# Define prevalence of each taxa; # (in how many samples did each taxa appear at least once)
library(doParallel);packageVersion("doParallel")#‘1.0.17’
library(foreach);packageVersion("foreach")#‘1.5.2’
library(tidyverse);packageVersion("tidyverse")#‘2.0.0’
library(ggplot2);packageVersion("ggplot2")#‘3.5.0’
library(vegan);packageVersion("vegan")#‘2.6.4’
library(reshape2);packageVersion("reshape2")#‘1.4.4’
library(phyloseq);packageVersion("phyloseq")#‘1.46.0’
library(randomForest);packageVersion("randomForest")
library(doBy);packageVersion("doBy")#‘4.7.1.1’
library(plotrix);packageVersion("plotrix")#‘3.8.4’
library(ggpubr);packageVersion("ggpubr")#‘0.6.0’
#Bacterial claasifier
load("/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/ps3_Bacteria.RData")
# All OTUs that do not average > prunescale across samples will be dropped.
prunescale.ps3_Bacteria = 0.05
# Prune out rare OTUs by mean relative abundance set by prunescale
tax.mean.ps3_Bacteria <- taxa_sums(ps3_Bacteria)/nsamples(ps3_Bacteria) # average number of reads for each otu
sites.prune.ps3_Bacteria <- prune_taxa(tax.mean.ps3_Bacteria > prunescale.ps3_Bacteria, ps3_Bacteria)
#Next, we are going to format a dataframe of predictors (OTUs) and responses (States)
# Make a dataframe of training data with OTUs as column and samples as rows
predictors.ps3_Bacteria<- t(otu_table(sites.prune.ps3_Bacteria));predictors.ps3_Bacteria
dim(predictors.ps3_Bacteria)
# 1197 1655
# Make one column for our outcome/response variable
response.ps3_Bacteria <- as.factor(sample_data(sites.prune.ps3_Bacteria)$Genotype);response.ps3_Bacteria
# Combine them into 1 data frame
rf.data.ps3_Bacteria <- data.frame(response.ps3_Bacteria, predictors.ps3_Bacteria);rf.data.ps3_Bacteria
str(rf.data.ps3_Bacteria)
# Set a random seed
set.seed(579383)
# My computer has 8 processor cores - adjust parameter of the following command as needed/desired
registerDoParallel(3)
# %dopar% implemented with foreach implements each loop call as an independent function call
# and then parallelizes all the function calls across the number of processers set above with
# registerDoParallel(). First, we need to set up a dataframe to store each bootstrap RF result.
boot.imp.s <- data.frame(predictors=NULL, Try=NULL, MeanDecreaseGini=NULL)
boot.imp.s <- foreach (Try=1:100, .combine=rbind) %dopar% {
ps3_Bacteria.classify <- randomForest(response.ps3_Bacteria ~., data = rf.data.ps3_Bacteria, ntree = 500, proximity=T, mtry=200)
print(ps3_Bacteria.classify)
# Make a data frame with predictor names and their importance
imp.s <- importance(ps3_Bacteria.classify)
imp.s <- data.frame(predictors = rownames(imp.s), imp.s)
cbind(imp.s, data.frame(Try=Try)) #)
}
# Same (and independent) as above but this time we are storing results from the
# out-of-bag error rates, so we car report the correct-incorrect classification
# rate for each group, and what types of misclassifications were made.
boot.oob <- NULL
boot.oob <- foreach (Try=1:100, .combine=rbind) %dopar% {
ps3_Bacteria.classify <- randomForest(response.ps3_Bacteria ~., data = rf.data.ps3_Bacteria, ntree = 500, proximity=T, mtry=200)
print(ps3_Bacteria.classify)
# Make a data frame with predictor names and their importance
imp.s <- importance(ps3_Bacteria.classify)
imp.s <- data.frame(predictors = rownames(imp.s), imp.s)
c(boot.oob, ps3_Bacteria.classify$err.rate[500,1])
}
#Display and visualize results
# Look at the results
mean(boot.oob)#0.1007352
sd(boot.oob)#0.003860804
range(boot.oob)# 0.09106099 0.11027569
# Create a dataframe with summary statistics from our bootstrap runs
summary.boot.s <- summaryBy(MeanDecreaseGini ~ predictors, data= boot.imp.s, FUN = c(mean, sd, std.error));summary.boot.s
write.csv(summary.boot.s,"summary.boot.s.csv")
# Look at it
head(summary.boot.s)
str(summary.boot.s)
# Order the predictor levels by importance
imp.s.sort <- arrange(summary.boot.s, desc(MeanDecreaseGini.mean));imp.s.sort
imp.s.sort$predictors <- factor(imp.s.sort$predictors, levels = imp.s.sort$predictors)
# Select the top 50 predictors
imp.s.5 <- imp.s.sort[1:5, ];imp.s.5
# What are those OTUs?
# otunames.s = otunames of predictors
# r.s = A logical containing which rows from phyloseq object were recovered as top 40 predictors
otunames.s <- imp.s.5$predictors;otunames.s
r.s <- rownames(tax_table(ps3_Bacteria)) %in% otunames.s;r.s
# Use r.s to pull out the taxonomic information for those OTUS in otunames.s
t.table <- as.data.frame(tax_table(ps3_Bacteria)[r.s, ])
write.csv(t.table, "RF.ps3_Bacteria.t.table.csv", quote=F,row.names=T)
#VISUALIZATION HERE
# Reformat the taxonomic names and paste them to OTU names for axis labels
# (highest determined taxonomic rate, get rid of special characters, etc.)
axislabels <- with(t.table, paste(rownames(t.table), gsub("[sgfocp]__","",Genus,perl=T) %>% gsub("_"," ",.,perl=T) %>% gsub("[\\s]?(unclassified|ge)[\\s]?","",.,perl=T)))
names(axislabels) <- rownames(t.table)
i <- grep("(uncultured)|([01234567890-]$)+", axislabels, perl=T)
axislabels[i]<-paste(names(axislabels)[i], t.table$Family[i])
# Now we sum the abundance of each OTU by state so we can order the
# RF predictor OTUs by which state they were most abundant in, followed
# by their importance value. This makes the heatmap easier to interpret.
sums<-summaryBy(. ~ response.ps3_Bacteria, data = rf.data.ps3_Bacteria[, c('response.ps3_Bacteria', as.character(otunames.s))], FUN = sum, keep.names = T);sums
state.organize <- sapply(as.character(otunames.s), FUN = function(x) which.max(sums[,x]));state.organize
sums$response.ps3_Bacteria
rf.data.ps3_Bacteria$response.ps3_Bacteria
# hm is a dataframe of the abundance of the predictors, standardized and log transformed
hm <- rf.data.ps3_Bacteria[,as.character(otunames.s)] %>% decostand(method='max', MARGIN=2) %>% decostand(method='log');hm
hm$sample <- gsub('_',' ',sample_data(ps3_Bacteria)[rownames(hm),'Genotype']$Genotype)
hm.melt <- melt(hm[c(order(state.organize), 6)]);hm.melt
# Define prevalence of each taxa; # (in how many samples did each taxa appear at least once)
library(doParallel);packageVersion("doParallel")#‘1.0.17’
library(foreach);packageVersion("foreach")#‘1.5.2’
library(tidyverse);packageVersion("tidyverse")#‘2.0.0’
library(ggplot2);packageVersion("ggplot2")#‘3.5.0’
library(vegan);packageVersion("vegan")#‘2.6.4’
library(reshape2);packageVersion("reshape2")#‘1.4.4’
library(phyloseq);packageVersion("phyloseq")#‘1.46.0’
library(randomForest);packageVersion("randomForest")
library(doBy);packageVersion("doBy")#‘4.7.1.1’
library(plotrix);packageVersion("plotrix")#‘3.8.4’
library(ggpubr);packageVersion("ggpubr")#‘0.6.0’
#Bacterial claasifier
load("/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/ps3_Bacteria.RData")
# All OTUs that do not average > prunescale across samples will be dropped.
prunescale.ps3_Bacteria = 0.05
# Prune out rare OTUs by mean relative abundance set by prunescale
tax.mean.ps3_Bacteria <- taxa_sums(ps3_Bacteria)/nsamples(ps3_Bacteria) # average number of reads for each otu
sites.prune.ps3_Bacteria <- prune_taxa(tax.mean.ps3_Bacteria > prunescale.ps3_Bacteria, ps3_Bacteria)
#Next, we are going to format a dataframe of predictors (OTUs) and responses (States)
# Make a dataframe of training data with OTUs as column and samples as rows
predictors.ps3_Bacteria<- t(otu_table(sites.prune.ps3_Bacteria));predictors.ps3_Bacteria
dim(predictors.ps3_Bacteria)
# 1197 1655
# Make one column for our outcome/response variable
response.ps3_Bacteria <- as.factor(sample_data(sites.prune.ps3_Bacteria)$Genotype);response.ps3_Bacteria
# Combine them into 1 data frame
rf.data.ps3_Bacteria <- data.frame(response.ps3_Bacteria, predictors.ps3_Bacteria);rf.data.ps3_Bacteria
str(rf.data.ps3_Bacteria)
# Set a random seed
set.seed(579383)
# My computer has 8 processor cores - adjust parameter of the following command as needed/desired
registerDoParallel(3)
# %dopar% implemented with foreach implements each loop call as an independent function call
# and then parallelizes all the function calls across the number of processers set above with
# registerDoParallel(). First, we need to set up a dataframe to store each bootstrap RF result.
boot.imp.s <- data.frame(predictors=NULL, Try=NULL, MeanDecreaseGini=NULL)
boot.imp.s <- foreach (Try=1:100, .combine=rbind) %dopar% {
ps3_Bacteria.classify <- randomForest(response.ps3_Bacteria ~., data = rf.data.ps3_Bacteria, ntree = 500, proximity=T, mtry=200)
print(ps3_Bacteria.classify)
# Make a data frame with predictor names and their importance
imp.s <- importance(ps3_Bacteria.classify)
imp.s <- data.frame(predictors = rownames(imp.s), imp.s)
cbind(imp.s, data.frame(Try=Try)) #)
}
# Same (and independent) as above but this time we are storing results from the
# out-of-bag error rates, so we car report the correct-incorrect classification
# rate for each group, and what types of misclassifications were made.
boot.oob <- NULL
boot.oob <- foreach (Try=1:100, .combine=rbind) %dopar% {
ps3_Bacteria.classify <- randomForest(response.ps3_Bacteria ~., data = rf.data.ps3_Bacteria, ntree = 500, proximity=T, mtry=200)
print(ps3_Bacteria.classify)
# Make a data frame with predictor names and their importance
imp.s <- importance(ps3_Bacteria.classify)
imp.s <- data.frame(predictors = rownames(imp.s), imp.s)
c(boot.oob, ps3_Bacteria.classify$err.rate[500,1])
}
#Display and visualize results
# Look at the results
mean(boot.oob)#0.1007352
sd(boot.oob)#0.003860804
range(boot.oob)# 0.09106099 0.11027569
# Create a dataframe with summary statistics from our bootstrap runs
summary.boot.s <- summaryBy(MeanDecreaseGini ~ predictors, data= boot.imp.s, FUN = c(mean, sd, std.error));summary.boot.s
write.csv(summary.boot.s,"summary.boot.s.csv")
# Look at it
head(summary.boot.s)
str(summary.boot.s)
# Order the predictor levels by importance
imp.s.sort <- arrange(summary.boot.s, desc(MeanDecreaseGini.mean));imp.s.sort
imp.s.sort$predictors <- factor(imp.s.sort$predictors, levels = imp.s.sort$predictors)
# Select the top 50 predictors
imp.s.5 <- imp.s.sort[1:5, ];imp.s.5
# What are those OTUs?
# otunames.s = otunames of predictors
# r.s = A logical containing which rows from phyloseq object were recovered as top 40 predictors
otunames.s <- imp.s.5$predictors;otunames.s
r.s <- rownames(tax_table(ps3_Bacteria)) %in% otunames.s;r.s
# Use r.s to pull out the taxonomic information for those OTUS in otunames.s
t.table <- as.data.frame(tax_table(ps3_Bacteria)[r.s, ])
write.csv(t.table, "RF.ps3_Bacteria.t.table.csv", quote=F,row.names=T)
#VISUALIZATION HERE
# Reformat the taxonomic names and paste them to OTU names for axis labels
# (highest determined taxonomic rate, get rid of special characters, etc.)
axislabels <- with(t.table, paste(rownames(t.table), gsub("[sgfocp]__","",Genus,perl=T) %>% gsub("_"," ",.,perl=T) %>% gsub("[\\s]?(unclassified|ge)[\\s]?","",.,perl=T)))
names(axislabels) <- rownames(t.table)
i <- grep("(uncultured)|([01234567890-]$)+", axislabels, perl=T)
axislabels[i]<-paste(names(axislabels)[i], t.table$Family[i])
# Now we sum the abundance of each OTU by state so we can order the
# RF predictor OTUs by which state they were most abundant in, followed
# by their importance value. This makes the heatmap easier to interpret.
sums<-summaryBy(. ~ response.ps3_Bacteria, data = rf.data.ps3_Bacteria[, c('response.ps3_Bacteria', as.character(otunames.s))], FUN = sum, keep.names = T);sums
state.organize <- sapply(as.character(otunames.s), FUN = function(x) which.max(sums[,x]));state.organize
sums$response.ps3_Bacteria
rf.data.ps3_Bacteria$response.ps3_Bacteria
# hm is a dataframe of the abundance of the predictors, standardized and log transformed
hm <- rf.data.ps3_Bacteria[,as.character(otunames.s)] %>% decostand(method='max', MARGIN=2) %>% decostand(method='log');hm
hm$sample <- gsub('_',' ',sample_data(ps3_Bacteria)[rownames(hm),'Genotype']$Genotype)
hm.melt <- melt(hm[c(order(state.organize), 5)]);hm.melt
hm
View(hm)
hm.melt <- reshape2::melt(hm[c(order(state.organize), 5)]);hm.melt
library(data.table)
hm.melt <- as.data.table(hm[c(order(state.organize), 6)])
melt(hm.melt)
View(hm.melt)
names(hm.melt) <- c("Tree","Taxon","StandardizedAbundance")
library(data.table)
hm.melt <- as.data.table(hm[c(order(state.organize), 5)])
melt(hm.melt)
melt(hm.melt)
hm.melt <- as.data.table(hm[c(order(state.organize), 5)]);hm.melt
hm.melt <- melt(hm[c(order(state.organize), 6)]);hm.melt
hm.melt <- melt(hm[c(order(state.organize), 5)]);hm.melt
hm.melt <- as.data.table(hm[c(order(state.organize), 6)]);hm.melt
melt(hm.melt)
names(hm.melt) <- c("Tree","Taxon","StandardizedAbundance")
load("/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/ps3_Bacteria3_Bacteria.RData")
load("/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/ps3_Bacteria3_Bacteria.RData")
load("/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/ps3_Bacteria3_Bacteria.RData")
# Define prevalence of each taxa; # (in how many samples did each taxa appear at least once)
library(doParallel);packageVersion("doParallel")#‘1.0.17’
library(foreach);packageVersion("foreach")#‘1.5.2’
library(tidyverse);packageVersion("tidyverse")#‘2.0.0’
library(ggplot2);packageVersion("ggplot2")#‘3.5.0’
library(vegan);packageVersion("vegan")#‘2.6.4’
library(reshape2);packageVersion("reshape2")#‘1.4.4’
library(phyloseq);packageVersion("phyloseq")#‘1.46.0’
library(randomForest);packageVersion("randomForest")
library(doBy);packageVersion("doBy")#‘4.7.1.1’
library(plotrix);packageVersion("plotrix")#‘3.8.4’
library(ggpubr);packageVersion("ggpubr")#‘0.6.0’
#Bacterial claasifier
load("/Users/expeditoolimi/Documents/Southampton/Tosin/African-seed-microbiome/ps3_Bacteria.RData")
prunescale.ps3_Bacteria = 0.05
# Prune out rare OTUs by mean relative abundance set by prunescale
tax.mean.ps3_Bacteria <- taxa_sums(ps3_Bacteria)/nsamples(ps3_Bacteria) # average number of reads for each otu
sites.prune.ps3_Bacteria <- prune_taxa(tax.mean.ps3_Bacteria > prunescale.ps3_Bacteria, ps3_Bacteria)
#Next, we are going to format a dataframe of predictors (OTUs) and responses (States)
# Make a dataframe of training data with OTUs as column and samples as rows
predictors.ps3_Bacteria<- t(otu_table(sites.prune.ps3_Bacteria));predictors.ps3_Bacteria
dim(predictors.ps3_Bacteria)
# 1197 1655
# Make one column for our outcome/response variable
response.ps3_Bacteria <- as.factor(sample_data(sites.prune.ps3_Bacteria)$Genotype);response.ps3_Bacteria
# Combine them into 1 data frame
rf.data.ps3_Bacteria <- data.frame(response.ps3_Bacteria, predictors.ps3_Bacteria);rf.data.ps3_Bacteria
str(rf.data.ps3_Bacteria)
# Set a random seed
set.seed(5000)
# My computer has 8 processor cores - adjust parameter of the following command as needed/desired
registerDoParallel(3)
# %dopar% implemented with foreach implements each loop call as an independent function call
# and then parallelizes all the function calls across the number of processers set above with
# registerDoParallel(). First, we need to set up a dataframe to store each bootstrap RF result.
boot.imp.s <- data.frame(predictors=NULL, Try=NULL, MeanDecreaseGini=NULL)
boot.imp.s <- foreach (Try=1:100, .combine=rbind) %dopar% {
ps3_Bacteria.classify <- randomForest(response.ps3_Bacteria ~., data = rf.data.ps3_Bacteria, ntree = 500, proximity=T, mtry=200)
print(ps3_Bacteria.classify)
# Make a data frame with predictor names and their importance
imp.s <- importance(ps3_Bacteria.classify)
imp.s <- data.frame(predictors = rownames(imp.s), imp.s)
cbind(imp.s, data.frame(Try=Try)) #)
}
# Same (and independent) as above but this time we are storing results from the
# out-of-bag error rates, so we car report the correct-incorrect classification
# rate for each group, and what types of misclassifications were made.
boot.oob <- NULL
boot.oob <- foreach (Try=1:100, .combine=rbind) %dopar% {
ps3_Bacteria.classify <- randomForest(response.ps3_Bacteria ~., data = rf.data.ps3_Bacteria, ntree = 500, proximity=T, mtry=200)
print(ps3_Bacteria.classify)
# Make a data frame with predictor names and their importance
imp.s <- importance(ps3_Bacteria.classify)
imp.s <- data.frame(predictors = rownames(imp.s), imp.s)
c(boot.oob, ps3_Bacteria.classify$err.rate[500,1])
}
#Display and visualize results
# Look at the results
mean(boot.oob)#0.1007352
sd(boot.oob)#0.003860804
range(boot.oob)# 0.09106099 0.11027569
# Create a dataframe with summary statistics from our bootstrap runs
summary.boot.s <- summaryBy(MeanDecreaseGini ~ predictors, data= boot.imp.s, FUN = c(mean, sd, std.error));summary.boot.s
